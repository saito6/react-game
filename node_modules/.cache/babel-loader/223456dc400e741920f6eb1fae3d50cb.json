{"ast":null,"code":"export var cardSetf=function cardSetf(){//30個の数から1つのみ重複するという条件で10個の配列を取り出す関数\nvar arr30=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];// TODO: もっと簡潔に\n// console.log(arr30);\n//シャッフルアルゴリズム\nvar a=arr30.length;while(a){var j=Math.floor(Math.random()*a);var t=arr30[--a];arr30[a]=arr30[j];arr30[j]=t;}// console.log(arr30);\n//先頭9個の数をcardcopyに入れる\nvar cardcopy=[9];var k=0;while(k<9){cardcopy[k]=arr30[k];k++;}//ランダムで一個追加(最初のを最後に付け足している)\ncardcopy.push(cardcopy[0]);//シャッフルアルゴリズム\na=cardcopy.length;while(a){j=Math.floor(Math.random()*a);t=cardcopy[--a];cardcopy[a]=cardcopy[j];cardcopy[j]=t;}// console.log(cardcopy);\nreturn cardcopy;};","map":{"version":3,"sources":["/Users/saito/Documents/GitHub/react-game/src/function/cardSet.js"],"names":["cardSetf","arr30","a","length","j","Math","floor","random","t","cardcopy","k","push"],"mappings":"AAAC,MAAO,IAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAC5B;AACD,GAAIC,CAAAA,KAAK,CAAG,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,CAAb,CAAe,CAAf,CAAiB,CAAjB,CAAmB,CAAnB,CAAqB,EAArB,CAAwB,EAAxB,CAA2B,EAA3B,CAA8B,EAA9B,CAAiC,EAAjC,CAAoC,EAApC,CAAuC,EAAvC,CAA0C,EAA1C,CAA6C,EAA7C,CAAgD,EAAhD,CAAmD,EAAnD,CAAsD,EAAtD,CAAyD,EAAzD,CAA4D,EAA5D,CAA+D,EAA/D,CAAkE,EAAlE,CAAqE,EAArE,CAAwE,EAAxE,CAA2E,EAA3E,CAA8E,EAA9E,CAAZ,CAA8F;AAC9F;AAEA;AACA,GAAIC,CAAAA,CAAC,CAAGD,KAAK,CAACE,MAAd,CACA,MAAOD,CAAP,CAAU,CACR,GAAIE,CAAAA,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,GAAgBL,CAA5B,CAAR,CACA,GAAIM,CAAAA,CAAC,CAAGP,KAAK,CAAC,EAAEC,CAAH,CAAb,CACAD,KAAK,CAACC,CAAD,CAAL,CAAWD,KAAK,CAACG,CAAD,CAAhB,CACAH,KAAK,CAACG,CAAD,CAAL,CAAWI,CAAX,CACD,CACD;AAEA;AACE,GAAIC,CAAAA,QAAQ,CAAG,CAAC,CAAD,CAAf,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACF,MAAMA,CAAC,CAAC,CAAR,CAAU,CACRD,QAAQ,CAACC,CAAD,CAAR,CAAcT,KAAK,CAACS,CAAD,CAAnB,CACAA,CAAC,GACF,CACD;AACAD,QAAQ,CAACE,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAtB,EACA;AACAP,CAAC,CAAGO,QAAQ,CAACN,MAAb,CACA,MAAOD,CAAP,CAAU,CACPE,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,GAAgBL,CAA5B,CAAJ,CACAM,CAAC,CAAGC,QAAQ,CAAC,EAAEP,CAAH,CAAZ,CACDO,QAAQ,CAACP,CAAD,CAAR,CAAcO,QAAQ,CAACL,CAAD,CAAtB,CACAK,QAAQ,CAACL,CAAD,CAAR,CAAcI,CAAd,CACD,CAED;AACA,MAAOC,CAAAA,QAAP,CACD,CAnCO","sourcesContent":[" export const cardSetf = () => {\n   //30個の数から1つのみ重複するという条件で10個の配列を取り出す関数\n  var arr30 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];// TODO: もっと簡潔に\n  // console.log(arr30);\n\n  //シャッフルアルゴリズム\n  var a = arr30.length;\n  while (a) {\n    var j = Math.floor( Math.random() * a );\n    var t = arr30[--a];\n    arr30[a] = arr30[j];\n    arr30[j] = t;\n  }\n  // console.log(arr30);\n\n  //先頭9個の数をcardcopyに入れる\n    var cardcopy = [9];\n    var k = 0;\n  while(k<9){\n    cardcopy[k] = arr30[k];\n    k++;\n  }\n  //ランダムで一個追加(最初のを最後に付け足している)\n  cardcopy.push(cardcopy[0]);\n  //シャッフルアルゴリズム\n  a = cardcopy.length;\n  while (a) {\n     j = Math.floor( Math.random() * a );\n     t = cardcopy[--a];\n    cardcopy[a] = cardcopy[j];\n    cardcopy[j] = t;\n  }\n\n  // console.log(cardcopy);\n  return cardcopy;\n}\n"]},"metadata":{},"sourceType":"module"}