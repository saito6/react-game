{"ast":null,"code":"export const cardSetf = () => {\n  //30個の数から1つのみ重複するという条件で10個の配列を取り出す関数\n  var arr30 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]; // TODO: もっと簡潔に\n\n  console.log(arr30); //シャッフルアルゴリズム\n\n  var a = arr30.length;\n\n  while (a) {\n    var j = Math.floor(Math.random() * a);\n    var t = arr30[--a];\n    arr30[a] = arr30[j];\n    arr30[j] = t;\n  }\n\n  console.log(arr30); //先頭9個の数をcardcopyに入れる\n\n  var cardcopy = [9];\n  var k = 0;\n\n  while (k < 9) {\n    cardcopy[k] = arr30[k];\n    k++;\n  } //ランダムで一個追加(最初のを最後に付け足している)\n\n\n  cardcopy.push(cardcopy[0]); //シャッフルアルゴリズム\n\n  a = cardcopy.length;\n\n  while (a) {\n    j = Math.floor(Math.random() * a);\n    t = cardcopy[--a];\n    cardcopy[a] = cardcopy[j];\n    cardcopy[j] = t;\n  }\n\n  console.log(cardcopy);\n  return cardcopy;\n};","map":{"version":3,"sources":["/Users/saito/Documents/GitHub/react-game/src/function/cardSet.js"],"names":["cardSetf","arr30","console","log","a","length","j","Math","floor","random","t","cardcopy","k","push"],"mappings":"AAAC,OAAO,MAAMA,QAAQ,GAAG,MAAM;AAC5B;AACD,MAAIC,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB,EAArB,EAAwB,EAAxB,EAA2B,EAA3B,EAA8B,EAA9B,EAAiC,EAAjC,EAAoC,EAApC,EAAuC,EAAvC,EAA0C,EAA1C,EAA6C,EAA7C,EAAgD,EAAhD,EAAmD,EAAnD,EAAsD,EAAtD,EAAyD,EAAzD,EAA4D,EAA5D,EAA+D,EAA/D,EAAkE,EAAlE,EAAqE,EAArE,EAAwE,EAAxE,EAA2E,EAA3E,EAA8E,EAA9E,CAAZ,CAF6B,CAEiE;;AAC9FC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAH6B,CAK7B;;AACA,MAAIG,CAAC,GAAGH,KAAK,CAACI,MAAd;;AACA,SAAOD,CAAP,EAAU;AACR,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,CAA5B,CAAR;AACA,QAAIM,CAAC,GAAGT,KAAK,CAAC,EAAEG,CAAH,CAAb;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWH,KAAK,CAACK,CAAD,CAAhB;AACAL,IAAAA,KAAK,CAACK,CAAD,CAAL,GAAWI,CAAX;AACD;;AACDR,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAb6B,CAe7B;;AACE,MAAIU,QAAQ,GAAG,CAAC,CAAD,CAAf;AACA,MAAIC,CAAC,GAAG,CAAR;;AACF,SAAMA,CAAC,GAAC,CAAR,EAAU;AACRD,IAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcX,KAAK,CAACW,CAAD,CAAnB;AACAA,IAAAA,CAAC;AACF,GArB4B,CAsB7B;;;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAtB,EAvB6B,CAwB7B;;AACAP,EAAAA,CAAC,GAAGO,QAAQ,CAACN,MAAb;;AACA,SAAOD,CAAP,EAAU;AACPE,IAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,CAA5B,CAAJ;AACAM,IAAAA,CAAC,GAAGC,QAAQ,CAAC,EAAEP,CAAH,CAAZ;AACDO,IAAAA,QAAQ,CAACP,CAAD,CAAR,GAAcO,QAAQ,CAACL,CAAD,CAAtB;AACAK,IAAAA,QAAQ,CAACL,CAAD,CAAR,GAAcI,CAAd;AACD;;AAEDR,EAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AACA,SAAOA,QAAP;AACD,CAnCO","sourcesContent":[" export const cardSetf = () => {\n   //30個の数から1つのみ重複するという条件で10個の配列を取り出す関数\n  var arr30 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];// TODO: もっと簡潔に\n  console.log(arr30);\n\n  //シャッフルアルゴリズム\n  var a = arr30.length;\n  while (a) {\n    var j = Math.floor( Math.random() * a );\n    var t = arr30[--a];\n    arr30[a] = arr30[j];\n    arr30[j] = t;\n  }\n  console.log(arr30);\n\n  //先頭9個の数をcardcopyに入れる\n    var cardcopy = [9];\n    var k = 0;\n  while(k<9){\n    cardcopy[k] = arr30[k];\n    k++;\n  }\n  //ランダムで一個追加(最初のを最後に付け足している)\n  cardcopy.push(cardcopy[0]);\n  //シャッフルアルゴリズム\n  a = cardcopy.length;\n  while (a) {\n     j = Math.floor( Math.random() * a );\n     t = cardcopy[--a];\n    cardcopy[a] = cardcopy[j];\n    cardcopy[j] = t;\n  }\n\n  console.log(cardcopy);\n  return cardcopy;\n}\n"]},"metadata":{},"sourceType":"module"}